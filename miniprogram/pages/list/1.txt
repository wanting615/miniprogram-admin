### 测试
```interface Bird{
  name: string,
  fly(): void
}
interface Fish{
  name: string,
  swim(): void
}

declare function getSmallPet(): Fish | Bird;

let pet = getSmallPet();
pet.name;
pet.swim(); //error 
//-------解决-------
//1.类型防护--使用类型断言
let pet1 = pet as Fish;
pet1.swim(); //ok
//2.类型防护--使用in字段
if("swim" in pet){
  pet.swim(); //ok
}
//3.类型防护---自定义类型防护
function isFish(pet: Fish | Bird): pet is Fish{
   return (pet as Fish).swim !== undefined;
}
isFish(pet) ? pet.swim() : pet.fly();//ok
//4.类型防护---使用type of
 function getStr( value: string | number){
  if(typeof value === "string"){
    return value;
  }
  if(typeof value == "number"){
    return value + "";
  }
  return  new Error(`Expected string or number, got '${value}'.`)
}
//5.类型防护-使用instance of;
interface Padder {
  getPaddingString(): string;
}

class SpaceRepeatingPadder implements Padder {
  constructor(private numSpaces: number) {}
  getPaddingString() {
    return Array(this.numSpaces + 1).join(" ");
  }
}

class StringPadder implements Padder {
  constructor(private value: string) {}
  getPaddingString() {
    return this.value;
  }
}

function getRandomPadder() {
  return Math.random() < 0.5 ? new SpaceRepeatingPadder(4) : new StringPadder("  ");
}

let padder: Padder = getRandomPadder();
//let padder: Padder

if (padder instanceof SpaceRepeatingPadder) {
  console.log(padder)
}
if (padder instanceof StringPadder) {
  console.log(padder)
}```